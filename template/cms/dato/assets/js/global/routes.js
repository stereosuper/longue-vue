import { getPagesList } from '~/config/i18n';

// ðŸš¦Routing
export const routes = {
    testList: 'test/index',
    testSingle: 'test/_test'
};

export const excludedRoutes = (isProdEnv = process.env.isProdEnv) =>
    isProdEnv
        ? [
              // NOTE: You can prevent the route /test from being generated by uncommenting the line below
              // /\/test/
          ]
        : [];

const checkSlashes = string => string.replace(/^\//, '');

/**
 * @description Allow us to get the nested path between the url's locale part and the page slug
 * @param {*} { model, store }
 * @returns {String}
 * NOTE: Update the model switch depending on Dato API
 */
export const getNestedSchema = ({ model, store }) => {
    const currentLocale = store.state.i18n.locale;
    let nestedPath = '';
    const pages = getPagesList();

    switch (model) {
        case 'case_studies_list_page':
            nestedPath = pages[routes.referencesList][currentLocale] ? pages[routes.referencesList][currentLocale] : '';
            break;
        case 'case_study_page':
            nestedPath = pages[routes.referencesSingle][currentLocale]
                ? pages[routes.referencesSingle][currentLocale]
                : '';
            break;
        case 'news_list_page':
            nestedPath = pages[routes.newsList][currentLocale] ? pages[routes.newsList][currentLocale] : '';
            break;
        case 'news_page':
            nestedPath = pages[routes.newsSingle][currentLocale] ? pages[routes.newsSingle][currentLocale] : '';
            break;
        case 'solution_page':
            nestedPath = pages[routes.solutionPage][currentLocale] ? pages[routes.solutionPage][currentLocale] : '';
            break;
        case 'about_page':
            nestedPath = pages[routes.aboutPage][currentLocale] ? pages[routes.aboutPage][currentLocale] : '';
            break;
        default:
            return '';
    }

    const slugIndex = nestedPath.indexOf(':');
    if (slugIndex > -1) nestedPath = nestedPath.slice(0, slugIndex);

    return `${checkSlashes(nestedPath)}`;
};

export const generateLink = ({ linkData, store, to, toWithoutLocale }) => {
    // Return external link data
    if (linkData && linkData.link) return linkData.link;

    // Return custom internal link with locale
    if (to || to === '') return `${store.state.localePath}${to}`.replace('//', '/');

    // Return custom internal link without locale
    if (toWithoutLocale || toWithoutLocale === '') return `${toWithoutLocale}`;

    // Handle page link
    if (linkData && linkData.page) {
        const { localePath } = store.state;
        const { slug = '', _modelApiKey } = linkData.page;
        const nestedPath = getNestedSchema({ model: _modelApiKey, store });
        return `${localePath}${nestedPath}${slug}`;
    }
};

export const getDynamicRoute = ({ route, slug, store }) => {
    const currentLocale = store.state.i18n.locale;
    const { localePath } = store.state;
    const pages = getPagesList();
    const nestedName = pages[route][currentLocale];
    const [, path] = nestedName
        .split('/')
        .reverse()
        .filter(Boolean);

    return `${localePath}${path}/${slug}`;
};

export const getSpecificRoute = ({ route, store }) => checkSlashes(getPagesList()[route][store.state.i18n.locale]);
